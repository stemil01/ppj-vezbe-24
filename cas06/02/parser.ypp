%{
    #include <iostream>
    #include <cstdlib>
    #include <map>

    extern int yylex();

    void yyerror(const std::string& poruka) {
        std::cerr << poruka << std::endl;
        exit(EXIT_FAILURE);
    }

    std::map<std::string, double> promenljive;
%}

%union {
    double realan_broj;
    std::string *niska;
    bool logicki_tip;
}

%token PRINT PRINT_ALL
%token EQ NEQ LEQ GEQ
%token<realan_broj> BROJ
%token<niska> ID

%type<realan_broj> izraz
%type<logicki_tip> logickiIzraz

%left '+' '-'
%left '*' '/'
%right UMINUS

%%

program: nizNaredbi { }
    ;

nizNaredbi
    : nizNaredbi naredba { }
    | naredba { }
    ;

naredba
    : naredbaDodele ';' { }
    | printNaredba ';' { }
    | logickiIzraz ';' {
        if ($1){
            std::cout << "True" << std::endl;
        }
        else {
            std::cout << "False" << std::endl;
        }
    }
    ;

naredbaDodele
    : ID '=' izraz {
        promenljive[*$1] = $3;
        delete $1;
    }
    ;

printNaredba
    : PRINT '(' izraz ')' {
        std::cout << $3 << std::endl;
    }
    | PRINT_ALL {
        std::cout << "------" << std::endl;
        for (auto& p : promenljive) {
            std::cout << p.first << ": " << p.second << std::endl;
        }
        std::cout << "------" << std::endl;
    }
    ;

logickiIzraz
    : izraz EQ izraz {
        $$ = $1 == $3;
    }
    | izraz NEQ izraz {
        $$ = $1 != $3;
    }
    | izraz '<' izraz {
        $$ = $1 < $3;
    }
    | izraz '>' izraz {
        $$ = $1 > $3;
    }
    | izraz LEQ izraz {
        $$ = $1 <= $3;
    }
    | izraz GEQ izraz {
        $$ = $1 >= $3;
    }
    ;

izraz
    : izraz '+' izraz {
        $$ = $1 + $3;
    }
    | izraz '-' izraz {
        $$ = $1 - $3;
    }
    | izraz '*' izraz {
        $$ = $1 * $3;
    }
    | izraz '/' izraz {
        $$ = $1 / $3;
    }
    | '-' izraz %prec UMINUS {
        $$ = -$2;
    }
    | '(' izraz ')' {
        $$ = $2;
    }
    | BROJ {
        $$ = $1;
    }
    | ID {
        if (promenljive.find(*$1) == promenljive.end()) {
            std::string promenljiva = *$1;
            delete $1;
            yyerror("promenljiva " + promenljiva + " nije deklarisana");
        }
        $$ = promenljive[*$1];
        delete $1;
    }
    ;

%%

int main() {
    if (yyparse() == 0) {
        std::cout << "pripada" << std::endl;
    }
    return 0;
}