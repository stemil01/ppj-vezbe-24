%{
    #include <iostream>
    #include <cstdlib>
    #include <map>
    #include "kompleksan_broj.hpp"

    std::map<std::string, KompleksanBroj *> promenljive;

    void deinit() {
        for (auto& p : promenljive) {
            delete p.second;
        }
    }

    extern int yylex();
    extern int yylex_destroy();

    void yyerror(const std::string& poruka) {
        std::cerr << poruka << std::endl;
        deinit();
        exit(EXIT_FAILURE);
    }
%}

%union {
    double realan_broj;
    std::string *niska;
    KompleksanBroj *kompleksan_broj;
}

%start nizNaredbi

%left '+' '-'
%left '*' '/'
%right UMINUS '~'

%token DEF PRINT
%token ARG MOD RE IM
%token<niska> ID
%token<realan_broj> BROJ

%type<kompleksan_broj> izraz
%type<kompleksan_broj> kompleksanBroj

%%

nizNaredbi
    : nizNaredbi naredba { }
    | naredba { }
    ;

naredba
    : naredbaDodele ';' { }
    | deklaracija ';' { }
    | printNaredba ';' { }
    ;

naredbaDodele
    : ID '=' izraz {
        if (promenljive.find(*$1) == promenljive.end()) {
            std::string promenljiva = *$1;
            delete $1;
            yyerror("promenljiva " + promenljiva + " nije deklarisana");
        }
        delete promenljive[*$1];
        promenljive[*$1] = $3;
        delete $1;
    }
    ;

deklaracija
    : DEF ID {
        if (promenljive.find(*$2) != promenljive.end()) {
            std::string promenljiva = *$2;
            delete $2;
            yyerror("promenljiva " + promenljiva + " je vec deklarisana");
        }
        promenljive[*$2] = new KompleksanBroj();
        delete $2;
    }
    | DEF ID '=' izraz {
        if (promenljive.find(*$2) != promenljive.end()) {
            std::string promenljiva = *$2;
            delete $2;
            yyerror("promenljiva " + promenljiva + " je vec deklarisana");
        }
        promenljive[*$2] = $4;
        delete $2;
    }
    ;

printNaredba
    : PRINT '(' izraz ')' {
        std::cout << *$3 << std::endl;
        delete $3;
    }
    ;

izraz
    : izraz '+' izraz {
        $$ = new KompleksanBroj(*$1 + *$3);
        delete $1;
        delete $3;
    }
    | izraz '-' izraz {
        $$ = new KompleksanBroj(*$1 - *$3);
        delete $1;
        delete $3;
    }
    | izraz '*' izraz {
        $$ = new KompleksanBroj(*$1 * *$3);
        delete $1;
        delete $3;
    }
    | izraz '/' izraz {
        $$ = new KompleksanBroj(*$1 / *$3);
        delete $1;
        delete $3;
    }
    | '-' izraz %prec UMINUS {
        $$ = new KompleksanBroj(- *$2);
        delete $2;
    }
    | '~' izraz {
        $$ = new KompleksanBroj(~ *$2);
        delete $2;
    }
    | '(' izraz ')' {
        // $$ = new KompleksanBroj(*$2);
        // delete $2;
        $$ = $2;
    }
    | ARG '(' izraz ')' {
        $$ = new KompleksanBroj($3->arg());
        delete $3;
    }
    | MOD '(' izraz ')' {
        $$ = new KompleksanBroj($3->mod());
        delete $3;
    }
    | RE '(' izraz ')' {
        $$ = new KompleksanBroj($3->get_re());
        delete $3;
    }
    | IM '(' izraz ')' {
        $$ = new KompleksanBroj($3->get_im());
        delete $3;
    }
    | ID {
        if (promenljive.find(*$1) == promenljive.end()) {
            std::string promenljiva = *$1;
            delete $1;
            yyerror("promenljiva " + promenljiva + " nije deklarisana");
        }
        $$ = new KompleksanBroj(*promenljive[*$1]);
        delete $1;
    }
    | kompleksanBroj {
        $$ = $1;
    }
    ;

kompleksanBroj
    : BROJ {
        $$ = new KompleksanBroj($1);
    }
    | '<' BROJ '>' {
        $$ = new KompleksanBroj($2);
    }
    | '<' BROJ ',' BROJ '>' {
        $$ = new KompleksanBroj($2, $4);
    }
    ;

%%

int main() {
    if (yyparse() == 0) {
        std::cout << "prihvaceno" << std::endl;
    }
    deinit();
    yylex_destroy();
    return 0;
}
